# Unity Command Injection

## 목차
1. [정의&원리](#1-정의원리)
2. [조치 가이드](#4-조치-가이드)

---

## 1. 정의&원리

### Unity 클라이언트 사이드 공격이란?
Unity 게임 엔진으로 제작된 WebGL 빌드 파일에 악성 스크립트를 삽입하여, 사용자가 브라우저에서 게임을 실행할 때 서버 시스템에서 의도하지 않은 명령을 실행하게 하는 공격입니다.

### 공격 유형

#### 1.1. 시스템 명령 실행 (System Command Execution)
- Process.Start()를 통한 시스템 프로그램 실행
- cmd, PowerShell 등 시스템 쉘 실행
- 작업 관리자, 탐색기 등 시스템 도구 실행

#### 1.2. 파일 시스템 접근 (File System Access)
- 로컬 파일 읽기/쓰기
- 시스템 디렉토리 탐색
- 레지스트리 조작

#### 1.3. 네트워크 통신 (Network Communication)
- 외부 서버와의 통신
- 민감한 정보 외부 전송
- 추가 악성 코드 다운로드

#### 1.4. 브라우저 조작 (Browser Manipulation)
- JavaScript 인터페이스를 통한 브라우저 제어
- 쿠키 및 로컬 스토리지 접근
- 다른 탭/윈도우 조작

### 공격 시나리오

#### 일반적인 Unity 클라이언트 공격 시나리오:
1. **악성 스크립트 작성**: Unity C# 스크립트에 시스템 명령 실행 코드 삽입
2. **빌드 파일 생성**: WebGL로 빌드하여 악성 코드가 포함된 실행 파일 생성
3. **파일 업로드**: 게임 업로드 사이트에 악성 빌드 파일 업로드
4. **사용자 유인**: 정상적인 게임으로 위장하여 사용자 실행 유도
5. **공격 실행**: 사용자가 게임 내 특정 버튼 클릭 시 시스템 명령 실행

### 일반적인 취약한 Unity 코드 패턴

#### 취약한 시스템 명령 실행(검증 시 사용했던 스크립트):
```csharp
using UnityEngine;
using System.Diagnostics;

public class VulnerableScript : MonoBehaviour
{
    public void OnButtonClick()
    {
        // 사용자 입력을 직접 시스템 명령으로 실행
        string userInput = inputField.text;
        Process.Start("cmd.exe", "/c " + userInput);
    }
}
```

#### 취약한 파일 접근:
```csharp
using UnityEngine;
using System.IO;

public class FileAccessScript : MonoBehaviour
{
    public void ReadSystemFile()
    {
        // 시스템 파일 직접 접근
        string content = File.ReadAllText("C:\\Windows\\System32\\drivers\\etc\\hosts");
        Debug.Log(content);
    }
}
```

---
    
    IEnumerator ReconnaissancePhase()
